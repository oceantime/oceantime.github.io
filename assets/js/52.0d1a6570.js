(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{434:function(a,t,s){"use strict";s.r(t);var e=s(42),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"arts-2019-左耳听风社群活动-每周完成一个-arts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arts-2019-左耳听风社群活动-每周完成一个-arts"}},[a._v("#")]),a._v(" ARTS-2019 左耳听风社群活动--每周完成一个 ARTS")]),a._v(" "),s("p",[a._v("1.Algorithm： 每周至少做一个 leetcode 的算法题\n2.Review: 阅读并点评至少一篇英文技术文章\n3.Tip: 学习至少一个技术技巧\n4.Share: 分享一篇有观点和思考的技术文章")]),a._v(" "),s("h3",{attrs:{id:"_1-algorithm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-algorithm"}},[a._v("#")]),a._v(" 1.Algorithm:")]),a._v(" "),s("p",[a._v("Coin Change 2 https://leetcode.com/submissions/detail/350215476/")]),a._v(" "),s("h3",{attrs:{id:"_2-review"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-review"}},[a._v("#")]),a._v(" 2.Review:")]),a._v(" "),s("p",[a._v("https://dev.to/lydiahallie/javascript-visualized-the-javascript-engine-4cdf\nJavaScript️可视化： JavaScript 引擎")]),a._v(" "),s("h4",{attrs:{id:"点评："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点评："}},[a._v("#")]),a._v(" 点评：")]),a._v(" "),s("p",[a._v("Lydia Hallie 基于 Node.js 和 Chrom 的浏览器所用的 V8 引擎讲解 js 代码是如何运行的。")]),a._v(" "),s("p",[a._v("1.代码加载：代码从 网络请求、缓存 或者 Service Worker 中加载并以 UTF-16 字节流加载到字节流解码器。")]),a._v(" "),s("p",[a._v("2.生成抽象语法树（AST）：词法分析，字节流解码器生成单词， 语法分析，解析器生成抽象语法树。")]),a._v(" "),s("ul",[s("li",[a._v("词法分析：字节流解码器从代码字节流中识别出一个个单词（token）后传递给 解析器（parser）")]),a._v(" "),s("li",[a._v("语法分析：JavaScript 引擎使用了两个解析器。一个是 预解析器，一个是 解析器。 为了减少加载网站所需的时间，该引擎尝试避免分析不需要立即执行的代码。\n"),s("ul",[s("li",[a._v("解析器（parser）：处理立即需要的代码")]),a._v(" "),s("li",[a._v("预解析器（pre-parser）：处理稍后可能使用的代码。")])])])]),a._v(" "),s("p",[a._v("3.生成字节码：接下来就要交给 解释器（interpreter） 了。解释器会遍历整个 AST，并生成 字节码。当字节码生成后，AST 便会被删除以节省内存空间。最终我们得到了更贴近 机器码 的 字节码。")]),a._v(" "),s("p",[a._v("4.执行字节码：生成了字节码之后，就可以进入执行阶段了。执行阶段过程中引擎会做一些优化操作，一个是 即时编译，一个是 内联缓存。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("即时编译（JIT：Just In Time）\n尽管 字节码 很快，但是它还可以更快！解释器在逐条解释执行字节码时，会分析是否有某段代码被多次执行，这样的代码被称为 热点代码。\n热点代码 和生成的 类型反馈 （type feedback） 会被发送到一个称为 优化编译器 的东西中，然后由它转换为可以直接被电脑执行的 机器码，这样在下次执行这段代码的时候就不需要再编译了，从而大大提升了代码的执行效率。")])]),a._v(" "),s("li",[s("p",[a._v("内联缓存\nJavaScript 是一种动态类型的语言，这意味着数据类型可以不断变化。如果 JS 引擎每次都要检查数据的类型，那速度将会非常慢。\n所以引擎就使用了一种叫做 内联缓存 （inline caching） 的技术。它将代码缓存在内存中，以便将来可以针对相同的行为直接返回缓存的值。比如你有一个函数调用了 100 次，每次都返回同一个值，那么引擎就会假定在 101 次时也返回该值。")])])]),a._v(" "),s("p",[a._v("总结\nJavaScript 引擎执行代码主要过程： 代码加载 -> 生成抽象语法树 ->  生成字节码 -> 执行字节码")]),a._v(" "),s("h3",{attrs:{id:"_3-tip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-tip"}},[a._v("#")]),a._v(" 3.Tip:")]),a._v(" "),s("p",[a._v("1.StreamSets 是一家致力于数据处理与分析的大数据解决方案的公司。公司主要选择 DataOps 发展路线，解决将数据转化为业务价值的重大挑战。")]),a._v(" "),s("p",[a._v("参考：https://streamsets.com/why-dataops/what-is-dataops/")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Streamsets 推出的产品主要包含：\nData Collector：是一种轻量级，功能强大的设计和执行引擎，可实时传输数据。使用该软件来路由和处理数据流中的数据。目前为开源产品。\nTransformer：是一个执行引擎，可在Apache Spark（一种开放源代码群集计算框架）上运行数据处理管道。由于Transformer管道在群集上部署的Spark上运行，因此管道可以执行转换，这些转换需要以批处理或流模式对整个数据集进行大量处理。暂未开源。\nControl Hub：是所有数据流管道的中央控制点。Control Hub允许团队大规模构建和执行大量复杂的数据流。收费产品，可申请试用。")])]),a._v(" "),s("li",[s("p",[a._v("Data Collector：可以实现不写一行代码完成数据的采集和流转。 通过拖拽式的可视化界面，实现数据管道 Pipelines 的设计和定时任务调度。最大的特点有：")]),a._v(" "),s("ul",[s("li",[a._v("可视化界面操作，不写代码完成数据的采集和流转\n- 内置监控，可是实时查看数据流传输的基本信息和数据的质量")]),a._v(" "),s("li",[a._v("强大的整合力，对现有常用组件全力支持，包括50种数据源、44种数据操作、46种目的地。")])])]),a._v(" "),s("li",[s("p",[a._v("Data Collector 最重要的概念就是数据源 (Origins)、操作 (Processors)、目的地 (Destinations)。 创建一个Pipelines管道配置也基本是这三个方面：")]),a._v(" "),s("ul",[s("li",[a._v("Origins 常用的有 Kafka、HTTP、UDP、JDBC、HDFS 等；")]),a._v(" "),s("li",[a._v("Processors 可以实现对每个字段的过滤、更改、编码、聚合等操作；")]),a._v(" "),s("li",[a._v("Destinations 跟 Origins差不多，可以写入Kafka、Flume、JDBC、HDFS、Redis等。")])])])]),a._v(" "),s("p",[a._v("2.Tarball 安装")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(".下载完整或核心的 Data Collector tarball：\nhttps://streamsets.com/products/dataops-platform/data-collector/download/\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(".将使用以下命令压缩包解压到所需位置：\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" zxf streamsets-datacollector-all-3.15.0.tgz\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(".配置： \n\n目录结构：\nbin：运行脚本目录\netc：默认配置文件目录，包括系统配置、权限配置、邮件配置、日志配置等\ndata：默认数据目录，用于存储用户设计的数据流等\nlog：默认的日志目录，包括GC日志和系统日志\nlibexec：默认运行时环境配置目录\nstreamsets-libs：默认系统自带组件目录\nuser-libs：用户自定义开发组件目录\nedge-binaries：Streamsets DC Edge 各种类型的安装包\n\n配置：\n启动之前配置用于存储配置文件，在 "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SDC_DIST")]),a._v(" 运行时目录之外创建用于配置，数据，日志和资源文件的目录。并确保文件目录的读写权限。在 "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SDC_DIST")]),a._v("/libexec/sdc-env.sh 文件中，将以下环境变量设置为新创建的目录：\n\nSDC_CONF：数据收集器配置目录\nSDC_DATA：数据收集器目录，用于管道状态和配置信息\nSDC_LOG：日志的数据收集器目录\nSDC_RESOURCES：运行时资源文件的数据收集器目录。\n\n将所有文件从 "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SDC_DIST")]),a._v("/etc 复制到新创建的 "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SDC_CONF")]),a._v(" 目录。\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(".启动 Data Collector：\n\nbin/streamsets "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dc")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(".后台托管启动 Data Collector：\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nohup")]),a._v(" bin/streamsets "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dc")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("/dev/null "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("2")]),a._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("&1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v(".访问地址 http://Ip:18630/ 默认用户密码为：admin/admin\n\n")])])]),s("p",[a._v("3.Docker 安装")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(".创建数据目录并启动：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p /opt/streamset-datas\ndocker run --restart on-failure –v /opt/streamset-datas:/data -p "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("18630")]),a._v(":18630 -d --name streamsets-dc streamsets/datacollector "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dc")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(".访问地址 http://Ip:18630/ 默认用户密码为：admin/admin\n\n")])])]),s("h3",{attrs:{id:"_4-share"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-share"}},[a._v("#")]),a._v(" 4.Share:")]),a._v(" "),s("p",[a._v("虚拟DOM与真实DOM的区别\nhttps://www.cnblogs.com/jack-wangsir/articles/12564674.html")])])}),[],!1,null,null,null);t.default=r.exports}}]);