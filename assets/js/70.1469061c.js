(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{449:function(s,a,t){"use strict";t.r(a);var e=t(42),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"arts-2019-左耳听风社群活动-每周完成一个-arts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arts-2019-左耳听风社群活动-每周完成一个-arts"}},[s._v("#")]),s._v(" ARTS-2019 左耳听风社群活动--每周完成一个 ARTS")]),s._v(" "),t("p",[s._v("1.Algorithm： 每周至少做一个 leetcode 的算法题\n2.Review: 阅读并点评至少一篇英文技术文章\n3.Tip: 学习至少一个技术技巧\n4.Share: 分享一篇有观点和思考的技术文章")]),s._v(" "),t("h3",{attrs:{id:"_1-algorithm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-algorithm"}},[s._v("#")]),s._v(" 1.Algorithm:")]),s._v(" "),t("p",[s._v("计算器 https://leetcode-cn.com/submissions/detail/114925301/")]),s._v(" "),t("h3",{attrs:{id:"_2-review"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-review"}},[s._v("#")]),s._v(" 2.Review:")]),s._v(" "),t("p",[s._v("https://blog.insightdatascience.com/scheduling-spark-jobs-with-airflow-4c66f3144660\n使用 Airflow 调度 Spark 任务")]),s._v(" "),t("h4",{attrs:{id:"点评："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#点评："}},[s._v("#")]),s._v(" 点评：")]),s._v(" "),t("p",[s._v("作者 Nicholas Leong 这篇文章提供了如何使用 Airflow 调度通过从 S3 下载 Reddit 数据触发 Spark 任务。")]),s._v(" "),t("ul",[t("li",[s._v("安装 Airflow 要使用pip安装")]),s._v(" "),t("li",[s._v("创建 Airflow DAG 的脚本")]),s._v(" "),t("li",[s._v("运行教程的 Airflow 检查项")]),s._v(" "),t("li",[s._v("有趣的测试：打开和关闭 WiFi 为了测试 Airflow 在失败时会重试任务")]),s._v(" "),t("li",[s._v("先决条件：本地安装 Spark")])]),s._v(" "),t("p",[s._v("结束语：\n作者给出了一个创建 DAG 的示例，该DAG包含三个任务：\n（1）从 S3 下载 Reddit 数据\n（2）Spark 中的唯一作者数以及\n（3）计算平均投票数。任务（2）和（3）彼此独立，并且都取决于任务（1）的完成。\n实例创建的DAG比较简单。实际上，生产环境的 Airflow DAG 可能具有数十个具有复杂依赖性的节点，并且将按小时或每天运行。")]),s._v(" "),t("h3",{attrs:{id:"_3-tip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-tip"}},[s._v("#")]),s._v(" 3.Tip:")]),s._v(" "),t("p",[s._v("1.云服务器就只有 1G 内存, make 出现 OOM 编译进程被 killed, 解决办法：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("// 使用 swap 需要开启一下，默认是关闭的。使用交换文件来做交换分区。\n// 先创建交换文件\nfallocate -l 4G /swapfile\n// or \n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/zero "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("of")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/swapfile "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1M "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v("\n// 修改权限\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")]),s._v(" /swapfile\n// 格式化文件\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkswap")]),s._v(" /swapfile\n//激活\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swapon")]),s._v(" /swapfile\n// 有需要的也可以设开机自启动\n// 打开 /etc/fstab，加上\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /etc/fstab\n/swapfile    none    swap    defaults     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n// 查看 swap \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZj6cidck6s26tnpwx4ymoZ ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# free")]),s._v("\n              total        used        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("      shared  buff/cache   available\nMem:        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1881952")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("82192")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("129584")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("240")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1670176")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1628592")]),s._v("\nSwap:       "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4194300")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("43784")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4150516")]),s._v("\n")])])]),t("p",[s._v("2.Linux 下设置 swappiness 参数来配置内存使用到多少才开始使用swap分区")]),s._v(" "),t("p",[s._v("swappiness的值的大小对如何使用swap分区是有着很大的联系的。swappiness=0的时候表示最大限度使用物理内存，然后才是swap空间，swappiness＝100的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面。linux的基本默认设置为60，具体如下：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/sys/vm/swappiness\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#60")]),s._v("\n")])])]),t("p",[s._v("也就是说，你的内存在使用到100-60=40%的时候，就开始出现有交换分区的使用。大家知道，内存的速度会比磁盘快很多，这样子会加大系统IO，同时造的成大量页的换进换出，严重影响系统的性能，所以我们在操作系统层面，要尽可能使用内存，对该参数进行调整。临时调整的方法如下，我们调成10：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("sysctl vm.swappiness"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#vm.swappiness=10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /proc/sys/vm/swappiness\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#10")]),s._v("\n")])])]),t("p",[s._v("这只是临时调整的方法，重启后会回到默认设置的.要想永久调整的话，需要在/etc/sysctl.conf修改，加上：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /etc/sysctl.conf\n// 加上\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Controls the maximum number of shared memory segments, in pages")]),s._v("\nkernel.shmall "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4294967296")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这一个可以不用设置")]),s._v("\nvm.swappiness "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n// 生效\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" sysctl -p\n")])])]),t("h3",{attrs:{id:"_4-share"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-share"}},[s._v("#")]),s._v(" 4.Share:")]),s._v(" "),t("p",[s._v("https://www.cnblogs.com/zhangfengshi/p/12736921.html\n分布式定时任务调度系统技术解决方案(xxl-job、Elastic-job、Saturn)")])])}),[],!1,null,null,null);a.default=n.exports}}]);