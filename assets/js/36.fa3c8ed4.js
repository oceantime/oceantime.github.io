(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{415:function(s,t,a){"use strict";a.r(t);var e=a(42),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"arts-2019-左耳听风社群活动-每周完成一个-arts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arts-2019-左耳听风社群活动-每周完成一个-arts"}},[s._v("#")]),s._v(" ARTS-2019 左耳听风社群活动--每周完成一个 ARTS")]),s._v(" "),a("p",[s._v("1.Algorithm： 每周至少做一个 leetcode 的算法题\n2.Review: 阅读并点评至少一篇英文技术文章\n3.Tip: 学习至少一个技术技巧\n4.Share: 分享一篇有观点和思考的技术文章")]),s._v(" "),a("h3",{attrs:{id:"_1-algorithm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-algorithm"}},[s._v("#")]),s._v(" 1.Algorithm:")]),s._v(" "),a("p",[s._v("Plus One https://leetcode.com/submissions/detail/303765795/")]),s._v(" "),a("h3",{attrs:{id:"_2-review"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-review"}},[s._v("#")]),s._v(" 2.Review:")]),s._v(" "),a("p",[s._v("https://github.com/elastic/beats/issues/1037")]),s._v(" "),a("h4",{attrs:{id:"点评："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#点评："}},[s._v("#")]),s._v(" 点评：")]),s._v(" "),a("p",[s._v("这个问题讨论的是日志采集的一个业务典型场景，比如一个订单生成会产生多个流程步骤，步骤不确定多少个节点这种情况一般业务会生成订单的单独日志文件，但如果 ELK 采集时会切分日志，如果日志采集链路经过 Kafka 队列会有一定几率会出现日志错位的情况，针对这种情况就产生了 Filebeat 采集时如何输入文件行号的问题。")]),s._v(" "),a("p",[s._v("针对这个问题，官方也给出了解答:\n此刻，我认为这里没有任何解决方案。 Logstash，Beats，Kibana 都是随着时间推移的事件的思路，这基本上是订购事物的方式。行号更像是文本编辑器的一种功能。在某种程度上，Kibana 可以向您显示文件中的事件。它不会为您提供逐页列表，您可以实际点击页码，但使用时间框架，理论上可以查看整个文件。")]),s._v(" "),a("p",[s._v("另一个回答：\n首先让我给出 Filebeat 还没有行号字段的主要原因。当 Filebeat 恢复读取文件时（如重启后），它会 fseek 从最后记录的偏移量恢复。如果必须报告行号，则需要将此状态存储在其注册表中，或者重新读取该文件并将新行计数到偏移量。\n如果要提供允许您对 Elasticsearch 支持的日志进行分页的服务，则可以使用滚动 API 和文件查询。您必须进行排序的结果通过 @timestamp，然后通过 offset 。您的服务将使用滚动查询来获取结果的第一页。\n然后获取您使用 scroll_id 第一个查询返回的所有后续页面。\n这将为您提供给定文件名的所有日志数据，甚至可以在旋转中跟踪它。如果行号是关键的，你可以通过计算从第一个事件开始的事件来合成地产生它们 offset == 0，但我避免这样做，因为它非常容易出错，特别是如果你添加任何过滤或多行分组。")]),s._v(" "),a("p",[s._v("总结：\n最终个人理解，目前只依赖 Filebeat 采集无法解决此问题，只能通过业务日志输出行号，再采集过程中单独解析字段，最终通过 Kibana 增加此字段通过过滤和排序达到获取完整业务日志的需求。")]),s._v(" "),a("h3",{attrs:{id:"_3-tip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-tip"}},[s._v("#")]),s._v(" 3.Tip:")]),s._v(" "),a("p",[s._v("spring boot 搭建 https 服务器")]),s._v(" "),a("ol",[a("li",[s._v("自签名证书:\n将生成的jks文件放置在 classpath 下，在 spring boot 的配置文件中增加如下内容")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 建立 CA 密钥")]),s._v("\nopenssl genrsa -des3 -out ca.key "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建密钥")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("400")]),s._v(" ca.key "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改权限为仅 root 能访问并不需要执行")]),s._v("\nopenssl rsa -nout -text -in ca.key "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看创建的证书")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 利用 CA 密钥自签署 CA 证书")]),s._v("\nopenssl req -new -x509 -days "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3650")]),s._v(" -key ca.key -out -ca.crt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("400")]),s._v(" ca.car "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改权限为仅 root 能访问并不需要执行")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CA 服务端 java 证书")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# crt 转 p12")]),s._v("\nopenssl pkcs12 -export -in ca.crt -inkey ca.key -out ca.p12 -name "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# p12 转 jks")]),s._v("\nkeytool -importkeystore -srckeystore ca.p12 -destkeystore ca.jks -deststoretype pkcs12\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# jsk 转 p12")]),s._v("\nkeytool -importkeystore -srckeystore ca.jks -srcstoretype JKS -deststoretype pkcs12 -destkeystore ca.p12\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CA 客户端证书")]),s._v("\nopenssl x509 -noout -text -in ca.crt "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看创建的证书")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" ca.key ca.crt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" cert.pem\nopenssl rsa -in cert.pem -out key.pem\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("spring boot 服务端配置:\n将生成的 jks 文件放置在 classpath 下，在 spring boot 的配置文件中增加如下内容")])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("port"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v("\nserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ssl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("store"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" classpath"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("ca"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("jks\nserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ssl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("store"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("password"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" password\nserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ssl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keyAlias"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" xxx\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("客户端使用 curl 命令模拟调用:")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将 cert.pem 和 key.pem 放在目录下")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -k --cert client.pem --key key.pem https://www.xxx.com/\n")])])]),a("h3",{attrs:{id:"_4-share"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-share"}},[s._v("#")]),s._v(" 4.Share:")]),s._v(" "),a("p",[s._v("OneAPM 工作两年总结\nhttps://yufan.me/two-years-in-oneapm/")])])}),[],!1,null,null,null);t.default=r.exports}}]);