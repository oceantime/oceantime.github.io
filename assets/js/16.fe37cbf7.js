(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{399:function(t,s,n){"use strict";n.r(s);var a=n(42),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"arts-2019-左耳听风社群活动-每周完成一个-arts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arts-2019-左耳听风社群活动-每周完成一个-arts"}},[t._v("#")]),t._v(" ARTS-2019 左耳听风社群活动--每周完成一个 ARTS")]),t._v(" "),n("p",[t._v("1.Algorithm： 每周至少做一个 leetcode 的算法题\n2.Review: 阅读并点评至少一篇英文技术文章\n3.Tip: 学习至少一个技术技巧\n4.Share: 分享一篇有观点和思考的技术文章")]),t._v(" "),n("h3",{attrs:{id:"_1-algorithm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-algorithm"}},[t._v("#")]),t._v(" 1.Algorithm:")]),t._v(" "),n("p",[t._v("Add Two Numbers：https://leetcode.com/submissions/detail/258727869/")]),t._v(" "),n("h3",{attrs:{id:"_2-review"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-review"}},[t._v("#")]),t._v(" 2.Review:")]),t._v(" "),n("p",[t._v("Metrics to Understand & Tackle Technical Debt\nhttps://www.notion.so/stepsize/3-Metrics-to-Understand-Tackle-Technical-Debt-4e7442a592cf40759bdd7e3733b7f815")]),t._v(" "),n("p",[t._v("点评：\n通过快速行动承担债务是理解系统如何构建及目的的短途径。文章提到了3个有效指标来衡量技术债务，优先偿还并持续跟踪进展。")]),t._v(" "),n("p",[t._v("所有权，防止缺陷和不必要的技术债\n定义：\n修订版本数计每个文件的历史活动及使用时间的折扣因子来计算所有权。超过n%所有权的贡献者为主要贡献者，所有其他贡献者为次要贡献者。\n如何跟踪：\n1.由所有者审查次要贡献者贡献及减少贡献\n2.识别若拥有域定义所有者并计划提供其所有权")]),t._v(" "),n("p",[t._v("内聚力提升架构\n定义：\n提交都在路径内部的文件中为内聚提交，否则是非内聚提交。内聚提交和提交总数的比例为内聚力。\n如何跟踪：\n1.内聚占比：组件内部的修改可以隔离或减少对其他组件的影响。\n2.耦合组件：了解那些组件和此组件有耦合，耦合强度，并找到根本原因。")]),t._v(" "),n("p",[t._v("流失以识别问题区域\n定义：\n过去1个月未修改的路径为稳定\n过去1个月至少修改过2次的路径为活动\n过去n个月也处于活动状态的路径为循环活动\n如何跟踪：\n1.改动频繁的文件:检查改动较多的文件确认是否和预期的，还是为了确保生产力避免意外而偿还的技术债务\n2.检查文件更改频率：所有更改都进行审核，因为与缺陷密切相关\n3.改动文件的比例：增长系统，指标保持在各个组件的水平，成熟系统，最小化次指标趋于稳定")]),t._v(" "),n("h3",{attrs:{id:"_3-tip"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-tip"}},[t._v("#")]),t._v(" 3.Tip:")]),t._v(" "),n("p",[t._v("linux Expect 是一个用来处理交互的命令。借助 Expect 我们可以将交互过程写在一个脚本上，使之自动化完成。形象的说，ssh 登录，ftp 登录等都符合交互的定义。")]),t._v(" "),n("p",[t._v("shell 脚本实现 ssh 自动登录远程服务器示例:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/usr/bin/expect")]),t._v("\nspawn "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ssh")]),t._v(" root@192.168.22.194\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*password:"')]),t._v("\nsend "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v('"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*#"')]),t._v("\ninteract\n")])])]),n("p",[t._v("Expect 中最关键的四个命令是 send expect spawn interact")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[t._v("send：用于向进程发送字符串\nexpect：从进程接收字符串\nspawn：启动新的进程\ninteract：允许用户交互\n")])])]),n("ol",[n("li",[t._v("send 命令：接收一个字符串参数，并将该参数发送到进程")])]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("expect1."),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v("\nhello world\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("expect 命令：和 send 命令正好相反，expect 通常是用来等待一个进程的反馈。 expect 可以接收一个字符串参数，也可以接收正则表达式参数。和上文的 send 命令结合，现在我们可以看一个最简单的交互式的例子：\n(1)基础知识")])]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v("\nsend "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello there!'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这两行代码的意思是：从标准输入中等到hi和换行键后，向标准输出输出 hello there。")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#tips： $expect_out(buffer)存储了所有对expect的输入，<$expect_out(0,string)>存储了匹配到expect参数的输入。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#比如如下程序：")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v("\nsend "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"you typed <'),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$expect_out")]),t._v('(buffer)>"')]),t._v("\nsend "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"but I only expected <'),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$expect_out")]),t._v('(0,string)>"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#当在标准输入中输入")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\nhi\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#是，运行结果如下")]),t._v("\n\nyou typed: "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\nhi\nI only expect: hi\n")])])]),n("p",[t._v("(2)模式-动作")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#expect 最常用的语法是来自 tcl 语言的模式-动作。 这种语法极其灵活，下面我们就各种语法分别说明。")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#单一分支模式语法：")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You said hi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#匹配到hi后，会输出"you said hi"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#多分支模式语法：")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You said hi'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello yourself'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bye"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"That was unexpected'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#匹配到 hi hello bye 任意一个字符串时，执行相应的输出。等同于如下写法：")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You said hi'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello yourself'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bye"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"That was unexpected'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("spawn 命令：上文的所有 demo 都是和标准输入输出进行交互，但是我们跟希望他可以和某一个进程进行交互。 spawm 命令就是用来启动新的进程的。 spawn 后的 send 和 expect 命令都是和 spawn 打开的进程进行交互的。 结合上文的 send 和 expect 命令我们可以看一下更复杂的程序段了。")])]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v(" -1\nspawn "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ftp")]),t._v(" ftp.test.com      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打开新的进程，该进程用户连接远程ftp服务器")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Name"')]),t._v("               "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进程返回Name时")]),t._v("\nsend "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v('"')]),t._v("               "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向进程输入anonymous\\r")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Password:"')]),t._v("          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进程返回Password:时")]),t._v("\nsend "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v('"')]),t._v("             "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向进程输入don@libes.com\\r")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ftp> "')]),t._v("              "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进程返回ftp>时")]),t._v("\nsend "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"binary'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v('"')]),t._v("             "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向进程输入binary\\r")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ftp> "')]),t._v("              "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进程返回ftp>时")]),t._v("\nsend "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get test.tar.gz'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v('"')]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向进程输入get test.tar.gz\\r")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这段代码的作用是登录到 ftp 服务器 ftp ftp.uu.net 上，并以二进制的方式下载服务器上的文件 test.tar.gz 。")]),t._v("\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("interact 命令：到现在为止，我们已经可以结合 spawn expect send自动化的完成很多任务了。 但是，如何让人在适当的时候干预这个过程了。比如下载完 ftp 文件时，仍然可以停留在 ftp 命令行状态，以便手动的执行后续命令。 interact 可以达到这些目的。\n下面一段脚本实现了从机器 A 登录到机器 B ，然后执行机器 B 上的 pwd 命令，并停留在 B 机器上，等待用户交互。")])]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/home/tools/bin/64/expect -f")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v(" -1  \n spawn "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ssh")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$BUser")]),t._v("@"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$BHost")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*password:"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$password")]),n("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v('"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$*")]),t._v('"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pwd'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v('"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n interact\n")])])]),n("h3",{attrs:{id:"_4-share"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-share"}},[t._v("#")]),t._v(" 4.Share:")]),t._v(" "),n("p",[t._v("OpenSSL 证书生成及Mac上Apache服务器配置 HTTPS(https://www.jianshu.com/p/b2a9655fe687)")])])}),[],!1,null,null,null);s.default=e.exports}}]);