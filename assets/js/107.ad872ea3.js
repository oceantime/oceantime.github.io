(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{488:function(t,e,a){"use strict";a.r(e);var n=a(42),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"arts-2019-左耳听风社群活动-每周完成一个-arts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arts-2019-左耳听风社群活动-每周完成一个-arts"}},[t._v("#")]),t._v(" ARTS-2019 左耳听风社群活动--每周完成一个 ARTS")]),t._v(" "),a("p",[t._v("1.Algorithm： 每周至少做一个 leetcode 的算法题\n2.Review: 阅读并点评至少一篇英文技术文章\n3.Tip: 学习至少一个技术技巧\n4.Share: 分享一篇有观点和思考的技术文章")]),t._v(" "),a("h3",{attrs:{id:"_1-algorithm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-algorithm"}},[t._v("#")]),t._v(" 1.Algorithm:")]),t._v(" "),a("ol",{attrs:{start:"401"}},[a("li",[t._v("二进制手表：https://leetcode-cn.com/problems/binary-watch/submissions/\n剑指 Offer 38. 字符串的排列：https://leetcode-cn.com/submissions/detail/188634609/\n剑指 Offer 15. 二进制中1的个数：https://leetcode-cn.com/submissions/detail/188951165/")])]),t._v(" "),a("h3",{attrs:{id:"_2-review"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-review"}},[t._v("#")]),t._v(" 2.Review:")]),t._v(" "),a("p",[t._v("https://eltonminetto.dev/en/post/2019-12-09-parquet-golang/\n在 Golang 中处理 parquet 文件")]),t._v(" "),a("h4",{attrs:{id:"点评："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#点评："}},[t._v("#")]),t._v(" 点评：")]),t._v(" "),a("p",[t._v("在这篇文章中，我将讨论一种相对较新的数据文件格式，以及如何在 Go 中使用它。该格式称为 Parquet，目前是 Apache 基金会支持的一个项目。它是一种二进制文件格式，用于存储和方便数据处理的一种列式存储格式。它支持不同类型的压缩，广泛应用于数据科学和大数据环境，与 Hadoop 等工具配合使用。我们使用这种格式将统计数据存储在 S3 存储桶中。这样，我们就可以使用 Lambda 函数进行并行处理，而不会使我们的数据库服务器过载。")]),t._v(" "),a("ul",[a("li",[t._v("第一步是创建一个struct代表我们将在此示例中处理的数据的对象：")])]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('type user struct {\n  ID        string    `parquet:"name=id, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  FirstName string    `parquet:"name=firstname, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  LastName  string    `parquet:"name=lastname, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Email     string    `parquet:"name=email, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Phone     string    `parquet:"name=phone, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Blog      string    `parquet:"name=blog, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Username  string    `parquet:"name=username, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Score     float64   `parquet:"name=score, type=DOUBLE"`\n  CreatedAt time.Time //wont be saved in the parquet file\n}\n')])])]),a("p",[t._v("此代码中的重要细节是 tags，它说明 struct 在生成 parquet 文件时将如何处理 的每个字段。为了处理数据，我使用了github.com/xitongsys/parquet-go 包，在存储库中，您可以看到更多可用标签示例。")]),t._v(" "),a("ul",[a("li",[t._v("现在让我们以以下 parquet 格式生成我们的第一个文件：")])]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('package main\n\nimport (\n  "fmt"\n  "log"\n  "time"\n  "github.com/bxcodec/faker/v3"\n  "github.com/xitongsys/parquet-go-source/local"\n  "github.com/xitongsys/parquet-go/parquet"\n  "github.com/xitongsys/parquet-go/reader"\n  "github.com/xitongsys/parquet-go/writer"\n)\n\ntype user struct {\n  ID        string    `parquet:"name=id, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  FirstName string    `parquet:"name=firstname, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  LastName  string    `parquet:"name=lastname, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Email     string    `parquet:"name=email, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Phone     string    `parquet:"name=phone, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Blog      string    `parquet:"name=blog, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Username  string    `parquet:"name=username, type=UTF8, encoding=PLAIN_DICTIONARY"`\n  Score     float64   `parquet:"name=score, type=DOUBLE"`\n  CreatedAt time.Time //wont be saved in the parquet file\n}\n\nconst recordNumber = 10000\n\nfunc main() {\n  var data []*user\n  //create fake data\n  for i := 0; i < recordNumber; i++ {\n    u := &user{\n      ID:        faker.UUIDDigit(),\n      FirstName: faker.FirstName(),\n      LastName:  faker.LastName(),\n      Email:     faker.Email(),\n      Phone:     faker.Phonenumber(),\n      Blog:      faker.URL(),\n      Username:  faker.Username(),\n      Score:     float64(i),\n      CreatedAt: time.Now(),\n    }\n    data = append(data, u)\n  }\n  err := generateParquet(data)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n}\n\nfunc generateParquet(data []*user) error {\n  log.Println("generating parquet file")\n  fw, err := local.NewLocalFileWriter("output.parquet")\n  if err != nil {\n    return err\n  }\n  //parameters: writer, type of struct, size\n  pw, err := writer.NewParquetWriter(fw, new(user), int64(len(data)))\n  if err != nil {\n    return err\n  }\n  //compression type\n  pw.CompressionType = parquet.CompressionCodec_GZIP\n  defer fw.Close()\n  for _, d := range data {\n    if err = pw.Write(d); err != nil {\n      return err\n    }\n  }\n  if err = pw.WriteStop(); err != nil {\n    return err\n  }\n  return nil\n}\n')])])]),a("ul",[a("li",[t._v("下一个片段显示了我们如何读取 parquet 文件中的内容：")])]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func readParquet() ([]*user, error) {\n  fr, err := local.NewLocalFileReader("output.parquet")\n  if err != nil {\n    return nil, err\n  }\n  pr, err := reader.NewParquetReader(fr, new(user), recordNumber)\n  if err != nil {\n    return nil, err\n  }\n  u := make([]*user, recordNumber)\n  if err = pr.Read(&u); err != nil {\n    return nil, err\n  }\n  pr.ReadStop()\n  fr.Close()\n  return u, nil\n}\n')])])]),a("ul",[a("li",[t._v("上面的例子只是一个说教的例子。当我正在读取整个文件并将所有 10,000 条记录放入内存时，这在谈论千兆字节数据时可能是一个问题。在实际应用中，我们将使用包提供的函数来仅获取文件的一部分：")])]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func readPartialParquet(pageSize, page int) ([]*user, error) {\n  fr, err := local.NewLocalFileReader("output.parquet")\n  if err != nil {\n    return nil, err\n  }\n  pr, err := reader.NewParquetReader(fr, new(user), int64(pageSize))\n  if err != nil {\n    return nil, err\n  }\n  pr.SkipRows(int64(pageSize * page))\n  u := make([]*user, pageSize)\n  if err = pr.Read(&u); err != nil {\n    return nil, err\n  }\n  pr.ReadStop()\n  fr.Close()\n  return u, nil\n}\n')])])]),a("ul",[a("li",[t._v("正如定义所表明的那样，我们使用的是列式存储格式。因此，我们可以只取该Score列并计算其平均值：：")])]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func calcScoreAVG() (float64, error) {\n  fr, err := local.NewLocalFileReader("output.parquet")\n  if err != nil {\n    return 0.0, err\n  }\n  pr, err := reader.NewParquetColumnReader(fr, recordNumber)\n  if err != nil {\n    return 0.0, err\n  }\n  num := int(pr.GetNumRows())\n\n  data, _, _, err := pr.ReadColumnByPath("parquet_go_root.score", num)\n  if err != nil {\n    return 0.0, err\n  }\n  var result float64\n  for _, i := range data {\n    result += i.(float64)\n  }\n  return (result / float64(num)), nil\n}\n')])])]),a("p",[t._v("总结：这篇文章的目的是介绍 parquet 文件格式，它对于数据传输非常有用，在不同规模的项目中替换 CSV 或 JSON 文件。")]),t._v(" "),a("h3",{attrs:{id:"_3-tip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-tip"}},[t._v("#")]),t._v(" 3.Tip:")]),t._v(" "),a("h4",{attrs:{id:"如何清理-sync-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何清理-sync-map"}},[t._v("#")]),t._v(" 如何清理 sync.map")]),t._v(" "),a("p",[t._v("1.1 range：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//erase map\nmap2.Range(func(key interface{}, value interface{}) bool {\n    map2.Delete(key)\n    return true\n})\n")])])]),a("p",[t._v("1.2 func + range：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//erase map")]),t._v("\ndelete2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bool "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    map2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmap2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delete2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("1.3 func + range：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("func "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eraseSyncMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bool "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nfunc "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// . . .")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//erase map")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eraseSyncMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("map2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("1.4 new：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//erase map: A zero sync.Map is empty and ready for use.")]),t._v("\nmap2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"go-map-string-interface-类型判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-map-string-interface-类型判断"}},[t._v("#")]),t._v(" go map[string]interface{} 类型判断")]),t._v(" "),a("p",[t._v("1.1 有时候，map[string]interface{} 有可能存储的是map，也可能是数组等等，那么在取值的时候需要做类型判断，例如：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('.(类型)\nstu_count = detail_dic["dynamic"].(map[string]interface{})["stu_count"].(float64)\n')])])]),a("p",[t._v("有时候会报错：interface {} is nil, 等等，需要在使用之前，判断nil即可。")]),t._v(" "),a("h3",{attrs:{id:"_4-share"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-share"}},[t._v("#")]),t._v(" 4.Share:")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/u010230794/article/details/82143179\ngo sync.Map 使用和介绍")]),t._v(" "),a("p",[t._v("https://iswade.github.io/articles/boltdb/\nBoltDB 源码阅读")]),t._v(" "),a("p",[t._v("https://jimchenglin.github.io/2019/05/12/KV-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/\nKV 存储引擎")]),t._v(" "),a("p",[t._v("https://www.cnblogs.com/chnmig/p/11806609.html\ngo module 基本使用")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/ronon77/article/details/84796629\n动态追踪技术（中） - Dtrace、SystemTap、火焰图")])])}),[],!1,null,null,null);e.default=r.exports}}]);