(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{457:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"arts-2019-左耳听风社群活动-每周完成一个-arts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arts-2019-左耳听风社群活动-每周完成一个-arts"}},[t._v("#")]),t._v(" ARTS-2019 左耳听风社群活动--每周完成一个 ARTS")]),t._v(" "),a("p",[t._v("1.Algorithm： 每周至少做一个 leetcode 的算法题\n2.Review: 阅读并点评至少一篇英文技术文章\n3.Tip: 学习至少一个技术技巧\n4.Share: 分享一篇有观点和思考的技术文章")]),t._v(" "),a("h3",{attrs:{id:"_1-algorithm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-algorithm"}},[t._v("#")]),t._v(" 1.Algorithm:")]),t._v(" "),a("ol",{attrs:{start:"1011"}},[a("li",[t._v("在 D 天内送达包裹的能力 https://leetcode-cn.com/submissions/detail/129017043/")]),t._v(" "),a("li",[t._v("爱吃香蕉的珂珂 https://leetcode-cn.com/submissions/detail/128962576/")])]),t._v(" "),a("h3",{attrs:{id:"_2-review"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-review"}},[t._v("#")]),t._v(" 2.Review:")]),t._v(" "),a("p",[t._v("https://www.omnisci.com/blog/fast-and-flexible-query-analysis-at-mapd-with-apache-calcite-2\n使用 Apache Calcite 在 MapD 上进行快速灵活的查询分析")]),t._v(" "),a("h4",{attrs:{id:"点评："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#点评："}},[t._v("#")]),t._v(" 点评：")]),t._v(" "),a("p",[t._v("作者：MapD Core 数据库中使用SQL解析器。在评估了其他一些选择之后，决定使用Apache Calcite（当时是一个孵化阶段的项目）。它使用高度可配置的基于成本的优化器进行SQL查询并生成扩展的关系代数。一些项目已经将Calcite用于SQL解析和查询优化。")]),t._v(" "),a("p",[t._v("主要优势：")]),t._v(" "),a("ul",[a("li",[t._v("其高度模块化的结构，该结构允许多个集成点和创新用途。它提供了一个关系代数生成器，使转换到其他SQL解析器变得可行。")]),t._v(" "),a("li",[t._v("包括一个功能强大且灵活的基于成本的优化器，该优化器可以基于查询模式和统计信息对关系代数进行高级转换。")]),t._v(" "),a("li",[t._v("一个功能强大且灵活的基于成本的优化器，该优化器可以基于查询模式和统计信息对关系代数进行高级转换。")])]),t._v(" "),a("p",[t._v("总结：\n关于性能，Apache Calcite 需要几毫秒的时间来解析并将 SQL 从 SQL 转换为序列化关系代数，而 JNI 编组则完全可以忽略。集成 Calcite  能够快速获得基本的子查询和外部联接。不断扩大可以执行的SQL查询的范围。像往常一样，真正的挑战是认识到实用的模式并发现执行它们的快速方法。Calcite 支持的各种查询能够提前计划，因为在执行方面进行任何工作之前，可以看到关系代数。")]),t._v(" "),a("h3",{attrs:{id:"_3-tip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-tip"}},[t._v("#")]),t._v(" 3.Tip:")]),t._v(" "),a("ol",[a("li",[t._v("vi/vim 中可以使用 😒 命令来替换字符串")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".:s/vivian/sky/ 替换当前行第一个 vivian 为 sky\n:s/vivian/sky/g 替换当前行所有 vivian 为 sky\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". :n,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$s")]),t._v("/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky\n:n,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$s")]),t._v("/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n 为数字，若 n 为 .，表示从当前行开始到最后一行"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". :%s/vivian/sky/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("等同于 :g/vivian/s//sky/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 替换每一行的第一个 vivian 为 sky\n:%s/vivian/sky/g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("等同于 :g/vivian/s//sky/g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 替换每一行中所有 vivian 为 sky\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 可以使用 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 作为分隔符，此时中间出现的 / 不会作为分隔符")]),t._v("\n:s"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 全局替换\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),t._v(" + G + $ 选定全部，然后输入 :s/原始字符串/目标字符串/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" :%s/原始字符串/目标字符串/\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 清除页面中所有行尾的空白符：\n:%s//s/+$//\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 清除所有空白\n:%s//"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/s*/n/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/+//r/\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 去掉所有的//注释\n:%s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("/s*//.*"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(". 去掉所有的/* */注释\n:%s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("/s*//*/_./"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("/*//s*"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(". 增加注释（一个操作应用在多行）\n比如需要增加"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#或者是//这种注释：")]),t._v("\nCtrl + "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),t._v(" 定位到开始行，然后选定需要的行，然后执行 I 命令，然后输入 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或 //，然后按 Esc键两次，即可把注释操作应用到所有选定的行，记住选定不能使用v指令，而应该使用Ctrl + v （清除注释请参考上面的方法）(v是按行选定，Ctrl + v 是按照列选定)")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(". 对齐行\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),t._v(" 选定需要整齐的行，输入 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 进行归整\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(". 打开多窗口\n在vim中使用 :sp 文件名 打开行窗口（横），使用 :vsp 文件名 打开列窗口（竖），使用 :q 关闭当前窗口，使用 :qa 关闭所有窗口，使用 Ctrl + w 在各个窗口中进行切换。\n最大化窗口：Ctrl + w 激活某个窗口，然后 Shitf + - 进行最大化\n改变窗口到指定行高度：Ctrl + w 激活窗口，10（需要变成的行大小数字），Shift + -，执行改变\n增加若干行高度：Ctrl + w 激活窗口，10（需要增加的行大小数字），Shift + +，执行改变\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(". 字符串/变量提示\n在输入内容状态，按 Ctrl + P 则显示所有本页中定义的字符串，如果输入字符串部分内容，然后按 Ctrl + p 则把所有你输入字符串开头的内容显示出来。在输入状态下按 Ctrl + x 能过查看所有有效的其他方式\n删除操作\n\n:%s/r//g 删除DOS方式的回车^M\n:%s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" *$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" 删除行尾空白\n\n:%s/^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("n1/1$/ 删除重复行\n\n:%s/^."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("pdf/new.pdf/ 只是删除第一个pdf\n\n:%s/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("--_."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("--"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("// 又是删除多行注释（咦？为什么要说「又」呢？）\n\n:g/s*^$/d 删除所有空行 ：这个好用有没有人用过还有其他的方法吗？\n:g"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("/^dd/d 删除不含字符串"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dd'")]),t._v("的行\n:v/^dd/d 同上 （译释：v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" g"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("，就是不匹配！）\n\n:g/str1/,/str2/d 删除所有第一个含str1到第一个含str2之间的行\n\n\n:v/./.,/./-1join 压缩空行\n:g/^$/,/./-j 压缩空行\n\nndw 或 ndW 删除光标处开始及其后的 n-1 个字符。\nd0 删至行首。\nd$ 删至行尾。\nndd 删除当前行及其后 n-1 行。\nx 或 X 删除一个字符。\nCtrl+u 删除输入方式下所输入的文本。\n^R 恢复u的操作\nJ 把下一行合并到当前行尾\nV 选择一行\n^V 按下^V后即可进行矩形的选择了\naw 选择单词\niw 内部单词"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("无空格"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nas 选择句子\nis 选择句子"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("无空格"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nap 选择段落\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" 选择段落"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("无空格"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nD 删除到行尾\nx,y 删除与复制包含高亮区\n\ndl 删除当前字符（与x命令功能相同）\nd0 删除到某一行的开始位置\nd^ 删除到某一行的第一个字符位置（不包括空格或TAB字符）\ndw 删除到某个单词的结尾位置\nd3w 删除到第三个单词的结尾位置\ndb 删除到某个单词的开始位置\ndW 删除到某个以空格作为分隔符的单词的结尾位置\ndB 删除到某个以空格作为分隔符的单词的开始位置\nd7B 删除到前面7个以空格作为分隔符的单词的开始位置\nd） 删除到某个语句的结尾位置\nd4） 删除到第四个语句的结尾位置\nd（ 删除到某个语句的开始位置\nd） 删除到某个段落的结尾位置\nd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" 删除到某个段落的开始位置\nd7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" 删除到当前段落起始位置之前的第7个段落位置\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dd")]),t._v(" 删除当前行\nd/text 删除从文本中出现“text”中所指定字样的位置，\n一直向前直到下一个该字样所出现的位置（但不包括该字样）之间的内容\ndfc 删除从文本中出现字符“c”的位置，一直向前直到下一个该字符所出现的位置（包括该字符）之间的内容\ndtc 删除当前行直到下一个字符“c”所出现位置之间的内容\nD 删除到某一行的结尾\nd$ 删除到某一行的结尾\n5dd 删除从当前行所开始的5行内容\ndL 删除直到屏幕上最后一行的内容\ndH 删除直到屏幕上第一行的内容\ndG 删除直到工作缓存区结尾的内容\nd1G 删除直到工作缓存区开始的内容\n今天用了\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 去掉所有的//注释\n:%s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("/s*//.*"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(". 去掉所有的/* */注释\n:%s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("/s*//*/_./"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("/*//s*"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n:1,$ /^M//\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("maven 编译异常：编码GBK的不可映射字符")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("project.build.sourceEncoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("UTF-8"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("project.build.sourceEncoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("maven.compiler.encoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("UTF-8"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("maven.compiler.encoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("maven 安装 jar 文件到本地仓库")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("org.jenkins-ci:task-reactor:jar:1.5\nmvn install:install-file -Dfile"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("D:/task-reactor-1.5.jar -DgroupId"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("org.jenkins-ci -DartifactId"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("task-reactor -Dversion"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.5")]),t._v(" -Dpackaging"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("jar\n\nibator-1.2.1.681.jar\nmvn install:install-file -Dfile"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("D:/ibator-1.2.1.681.jar -DgroupId"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("org.apache.ibatis -DartifactId"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ibator -Dversion"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(".1.681 -Dpackaging"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("jar\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("tar 分卷压缩与解压缩")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 分卷压缩gz")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tar zcf - 2017.log |split -d -b 100m - logs.tar.gz.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成文件： logs.tar.gz.00 logs.tar.gz.01")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 分卷压缩bz2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tar jcf - 2017.log |split -d -b 100m - logs.tar.bz2.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成文件： logs.tar.bz2.00 logs.tar.bz2.01")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解压gz分卷")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat logs.tar.gz* | tar zx")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解压bz2分卷")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat logs.tar.gz* | tar jx")]),t._v("\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("pip 镜像使用")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("升级 pip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".0 后配置：\n全局配置\npip "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" pip -U\npip config "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n单次安装包使用\npip "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[t._v("conda 安装本地包")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://conda.anaconda.org/pytorch/win-64/pytorch-1.2.0-py3.5_cuda100_cudnn7_1.tar.bz2\nconda "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --use-local pytorch-1.2.0-py3.5_cuda100_cudnn7_1.tar.bz2\n")])])]),a("ol",{attrs:{start:"7"}},[a("li",[t._v("python 安装本地包")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("pip "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" *.whl\npython setup.py "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("  一般为 zip、tar.gz等压缩包，解压进入目录执行\n")])])]),a("ol",{attrs:{start:"8"}},[a("li",[t._v("conda 激活默认环境")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 激活环境")]),t._v("\nconda activate\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 退出环境")]),t._v("\nconda deactivate\n")])])]),a("h3",{attrs:{id:"_4-share"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-share"}},[t._v("#")]),t._v(" 4.Share:")]),t._v(" "),a("p",[t._v("https://zhuanlan.zhihu.com/p/72981916\n利用python的dask搭建分布式集群")]),t._v(" "),a("p",[t._v("https://www.pythonf.cn/read/113814\nPython的分布式计算框架——Dask调度器简介")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/wudinaniya/article/details/98988345\nansible简介 及 CentOS7 安装ansible （rpm）及 安装ansible插件ansible-cmdb 实现cmdb功能")]),t._v(" "),a("p",[t._v("https://www.infoq.cn/article/0dVxZ4DwFPbLDBUWiriG\n在阿里云容器服务中体验RAPIDS加速数据科学")]),t._v(" "),a("p",[t._v("https://www.jianshu.com/p/aeed2a56a3eb\nNginx 反向代理及 Cookie 相关问题")]),t._v(" "),a("p",[t._v("https://www.jianshu.com/p/022685baba7d\n微服务部署：蓝绿部署、滚动部署、灰度发布、金丝雀发布")])])}),[],!1,null,null,null);s.default=r.exports}}]);