(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{482:function(a,n,t){"use strict";t.r(n);var e=t(42),s=Object(e.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"arts-2019-左耳听风社群活动-每周完成一个-arts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arts-2019-左耳听风社群活动-每周完成一个-arts"}},[a._v("#")]),a._v(" ARTS-2019 左耳听风社群活动--每周完成一个 ARTS")]),a._v(" "),t("p",[a._v("1.Algorithm： 每周至少做一个 leetcode 的算法题\n2.Review: 阅读并点评至少一篇英文技术文章\n3.Tip: 学习至少一个技术技巧\n4.Share: 分享一篇有观点和思考的技术文章")]),a._v(" "),t("h3",{attrs:{id:"_1-algorithm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-algorithm"}},[a._v("#")]),a._v(" 1.Algorithm:")]),a._v(" "),t("p",[a._v("链表问题练习：https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2t7vj/")]),a._v(" "),t("ul",[t("li",[a._v("删除链表中的节点")]),a._v(" "),t("li",[a._v("删除链表的倒数第N个节点")]),a._v(" "),t("li",[a._v("反转链表")]),a._v(" "),t("li",[a._v("合并两个有序链表")]),a._v(" "),t("li",[a._v("回文链表")]),a._v(" "),t("li",[a._v("环形链表")])]),a._v(" "),t("h3",{attrs:{id:"_2-review"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-review"}},[a._v("#")]),a._v(" 2.Review:")]),a._v(" "),t("p",[a._v("http://otm.github.io/2015/07/embedding-lua-in-go\n在 Go 中使用 lua 脚本")]),a._v(" "),t("h4",{attrs:{id:"点评："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#点评："}},[a._v("#")]),a._v(" 点评：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("在Go中运行Lua代码：")])]),a._v(" "),t("li",[t("p",[a._v("首先，通过安装 gopher-lua 来设置环境并测试其是否正常工作：")])])]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("go get github.com/yuin/gopher-lua\n")])])]),t("ul",[t("li",[a._v("其次，让我们创建一个最小的实现：")])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('package main\n\nimport "github.com/yuin/gopher-lua"\n\nfunc main() {\n  L := lua.NewState()\n  defer L.Close()\n  if err := L.DoString(`print("Hello World")`); err != nil {\n    panic(err)\n  }\n}\n')])])]),t("ul",[t("li",[a._v("lua.NewState() 创建我们的 Lua VM，尽管这样 L （* lua.LState）我们将来会与Lua进行交互。在整个帖子中，L 都将指向的指针 lua.LState 。L.DoString 在 VM 中运行 Lua 代码。运行 Go 代码将产生：")])]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("$ go run hello.go\nHello World\n")])])]),t("ul",[t("li",[a._v("要运行 Lua 文件而不是字符串，请调用 lua.DoFile：")])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('L := lua.NewState()\ndefer L.Close()\nif err := L.DoFile("hello.lua"); err != nil {\n    panic(err)\n}\n')])])]),t("ul",[t("li",[t("p",[a._v("将Lua代码嵌入为字符串：")])]),a._v(" "),t("li",[t("p",[a._v("DoFile 并且 DoString 可以多次调用，因此可以用来公开 Lua 函数。在示例 sayHello 中，首先定义了波纹管功能，然后在第二个调用中调用 DoString：")])])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('func main() {\n  L := lua.NewState()\n  defer L.Close()\n  if err := L.DoString(`function sayHello() print("Hello Again") end`); err != nil {\n    panic(err)\n  }\n\n  if err := L.DoString(`sayHello()`); err != nil {\n    panic(err)\n  }\n}\n')])])]),t("ul",[t("li",[a._v("从 Lua 调用 Go Code")]),a._v(" "),t("li",[a._v("将 Go 函数暴露给 Lua 对于创建自定义自定义 API 是必不可少的。 Go 函数应实现 LGFunction 可从 Lua 调用的类型：")])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("type LGFunction func(*LState) int\n")])])]),t("ul",[t("li",[a._v("它接收 a*lua.LState 并返回一个整数。该 LState 是需要用 Lua 的 VM 检索功能参数进行交互，最常见的。返回的整数定义将多少个返回值压入 Lua 堆栈。一个完整的示例如下所示：")])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('func square(L *lua.LState) int {  //*\n  i := L.ToInt(1)          // get first (1) function argument and convert to int\n  ln := lua.LNumber(i * i) // make calculation and cast to LNumber\n  L.Push(ln)               // Push it to the stack\n  return 1                 // Notify that we pushed one value to the stack\n}\n\nfunc main() {\n  L := lua.NewState()\n  defer L.Close()\n\n  L.SetGlobal("square", L.NewFunction(square)) // Register our function in Lua\n  if err := L.DoString(`print("4 * 4 = " .. square(4))`); err != nil {\n    panic(err)\n  }\n}\n')])])]),t("ul",[t("li",[a._v("LState 定义了一些便利函数，在上面的示例中，我们 L.ToInt(1) 用于获取第一个函数参数。")]),a._v(" "),t("li",[a._v("注意：\n"),t("ul",[t("li",[a._v("Lua 不是零索引的，因此第一个函数参数是通过获取的 L.ToInt(1)，第二个参数是使用的 L.ToInt(2)。在 Lua 中，所有数组都是1索引的，但是 t [0] 仍然有效，但是这将导致数组的长度不一一对应。")]),a._v(" "),t("li",[a._v("有许多To...(n int)功能可用。这些函数不会引发错误，但是如果无法进行转换，则将返回Go默认值。要获得自动错误，L.Check...(n int)可以使用一系列功能；如果类型检查失败，则会抛出Lua错误。对于可选参数，L.Opt...(n int, default T)可以使用函数。例子：")]),a._v(" "),t("li",[a._v("L.GetTop()返回调用函数时使用的参数数量。要获取参数而不进行转换，L.Get(n int)可以使用该函数。")]),a._v(" "),t("li",[a._v("如果某个函数的参数可以是一个以上的类型，则该L.CheckTypes(n int, types ...LValueType)函数可用于检查并向用户产生错误。使用该L.CheckTypes函数等同于手动检查类型，然后L.TypeError(n int, message string)在出现错误时调用。")])])])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// Second argument can be string or function\nL.CheckTypes(2, lua.LTString, lua.LTFunction)\nswitch lv := L.Get(2).(type) {\ncase LString:\n  // use as string\ncase Lfunction:\n  // use as function\n}\n")])])]),t("ul",[t("li",[t("p",[a._v("从 Go 呼叫 Lua:")])]),a._v(" "),t("li",[t("p",[a._v("通过调用 Lua 代码是通过来完成的 L.CallByParam，它将参数对象P和参数作为可变参数。参数对象采用三个重要参数：")])]),a._v(" "),t("li",[t("p",[a._v("Fn - lua.LFunction 调用")])]),a._v(" "),t("li",[t("p",[a._v("Nret - 返回值的数量")])]),a._v(" "),t("li",[t("p",[a._v("Protect -如果true返回保护错误，则将发生恐慌。")])]),a._v(" "),t("li",[t("p",[a._v("以下代码在 Lua 中定义了 “concat” 函数。使用参数 “Go” 和 “Lua” 调用 concat 函数，并将结果字符串输出到 stdout。")])])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// luaCode is the Lua code we want to call from Go\nvar luaCode = `\nfunction concat(a, b)\n  return a .. " + " .. b\nend\n`\n\nfunc main() {\n  L := lua.NewState()\n  defer L.Close()\n\n  if err := L.DoString(luaCode); err != nil {\n    panic(err)\n  }\n\n  // Call the Lua function concat\n  // Lua analogue:\n  //  str = concat("Go", "Lua")\n  //  print(str)\n  if err := L.CallByParam(lua.P{\n    Fn:      L.GetGlobal("concat"), // name of Lua function\n    NRet:    1,                     // number of returned values\n    Protect: true,                  // return err or panic\n  }, lua.LString("Go"), lua.LString("Lua")); err != nil {\n    panic(err)\n  }\n\n  // Get the returned value from the stack and cast it to a lua.LString\n  if str, ok := L.Get(-1).(lua.LString); ok {\n    fmt.Println(str)\n  }\n\n  // Pop the returned value from the stack\n  L.Pop(1)\n}\n')])])]),t("ul",[t("li",[a._v("Gopher-Lua 特性:")]),a._v(" "),t("li",[a._v("Gopher-Lua类型, gopher-lua库在名为的接口上运行LValue。")])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("type LValue interface {\n  String() string\n  Type()   LValueType\n}\n")])])]),t("ul",[t("li",[a._v("实现此接口的对象是LNilType，LBool，LNumber，LString，LFunction，LUserData，LState，LTable，和LChannel。调用LValue.Type()返回相应的LValueType。")])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const (\n  LTNil LValueType = iota\n  LTBool\n  LTNumber\n  LTString\n  LTFunction\n  LTUserData\n  LTThread\n  LTTable\n  LTChannel\n)\n")])])]),t("ul",[t("li",[t("p",[a._v("转换和检查功能, 一些实用的功能可以转换和检查 lua.LValue 对象。")]),a._v(" "),t("ul",[t("li",[a._v("lua.LVAsBool(v LValue) - 转换为 bool，nil 和 false 变为 false。否则为真。")]),a._v(" "),t("li",[a._v("lua.LVAsString(v LValue) - 将 LString 和 LNumber 转换为字符串。否则为空字符串。")]),a._v(" "),t("li",[a._v("lua.CanConvToString(v LValue) - 如果为 LString 或 LNumber，则为 true。否则为假。")]),a._v(" "),t("li",[a._v("lua.LVIsFalse(v LValue) - 如果为 nil 或 false，则返回 true。")])])]),a._v(" "),t("li",[t("p",[a._v("LTable类型, LTable 是Lua 中功能最多且使用最广泛的数据结构之一（实际上，它是唯一的）。LTable 类型可用于模拟名称空间和类。但是，基本的API非常简单，高级功能值得一提。")])])]),a._v(" "),t("h3",{attrs:{id:"_3-tip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-tip"}},[a._v("#")]),a._v(" 3.Tip:")]),a._v(" "),t("h4",{attrs:{id:"go-string-处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go-string-处理"}},[a._v("#")]),a._v(" go string 处理")]),a._v(" "),t("ul",[t("li",[a._v("uin8 数组转 string")])]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("myByteSlice :"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("byte"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("     // same as myByteSlice :"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("uint8"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nmyString :"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("myByteSlice"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  // myString is a string representation of the byte slice\nmyOtherSlice :"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("byte"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("myString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" // Converted back to byte slice\n")])])]),t("ul",[t("li",[a._v("string 转 struct")])]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('package main\n\nimport (\n    "fmt"\n    "encoding/json"\n)\n\ntype s struct {\n    Int       int\n    String    string\n    ByteSlice []byte\n}\n\nfunc main() {\n    a := &s{42, "Hello World!", []byte{0,1,2,3,4}}\n\n    out, err := json.Marshal(a)\n    if err != nil {\n        panic (err)\n    }\n\n    fmt.Println(string(out))\n}\n\n// {"Int":42,"String":"Hello World!","ByteSlice":"AAECAwQ="}\n')])])]),t("h4",{attrs:{id:"go-import使用及-的作用解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go-import使用及-的作用解析"}},[a._v("#")]),a._v(" go import使用及 . _的作用解析")]),a._v(" "),t("p",[a._v("1、使用点操作引入包时，可以省略包前缀：")]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import(\n. "fmt"\n)\n注意上面 fmt前多了 . 字符。代码中使用时：\nPrintln("hello world")\n前缀fmt就不需要了。\n')])])]),t("p",[a._v("2、别名操作可以给包起个小名儿。如：")]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import(\nf "fmt"\n)\nf.Println("hello world")\n')])])]),t("p",[a._v("3、_操作 由于go在引入包时调用包的init方法。所以使用_操作，主要是为了使用包的init函数，一般用在数据库方面的包中：：")]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import (\n"database/sql"\n_ "github.com/ziutek/mymysql/godrv"\n)\n')])])]),t("h4",{attrs:{id:"go-读取一个未知的json（支持数组型json）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go-读取一个未知的json（支持数组型json）"}},[a._v("#")]),a._v(" go 读取一个未知的Json（支持数组型Json）")]),a._v(" "),t("div",{staticClass:"language-golang extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('package main\n\nimport (\n    "encoding/json"\n    "fmt"\n    "strings"\n)\n\nfunc UnknownJson(data string) {\n    if data != `` {\n        r := strings.NewReader(data)\n        dec := json.NewDecoder(r)\n        switch data[0] {\n        case 91:\n            // "[" 开头的Json（数组型Json）\n            param := []interface{}{}\n            dec.Decode(&param)\n            fmt.Println(param)\n            // fmt.Println(param[0])                      // 使用一个值\n            // println(reflect.TypeOf(param[0]).String()) // 获取值的类型\n        case 123:\n            // "{" 开头的Json（对象型Json）\n            param := make(map[string]interface{})\n            dec.Decode(&param)\n            fmt.Println(param)\n            // fmt.Println(param[`a`])                      // 使用一个值\n            // println(reflect.TypeOf(param[`a`]).String()) // 获取值的类型\n        }\n    }\n}\n\nfunc main() {\n    UnknownJson(`{"a":1}`)\n    UnknownJson(`[{"a":1},{"b":2}]`)\n    UnknownJson(`[1,2,3,4]`)\n}\n')])])]),t("h3",{attrs:{id:"_4-share"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-share"}},[a._v("#")]),a._v(" 4.Share:")]),a._v(" "),t("p",[a._v("http://github.com/yuin/gopher-lua/issues/160\nHow to convert a go map to lua table")]),a._v(" "),t("p",[a._v("https://www.cnblogs.com/liuzhongchao/p/9233177.html\nGolang 包管理工具之 govendor 的使用")]),a._v(" "),t("p",[a._v("https://segmentfault.com/a/1190000018482369\n当 Go 遇上了 Lua")]),a._v(" "),t("p",[a._v("https://blog.csdn.net/aiqinxuancai/article/details/49905153\nlua 中使用 json 格式")]),a._v(" "),t("p",[a._v("https://blog.guaik.org/2020/04/15/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%EF%BC%8Clua%E7%9A%84table%E4%B8%8Ejson%E4%BA%92%E8%BD%AC/\n递归算法，lua 的 table 与 json 互转")]),a._v(" "),t("p",[a._v("https://blog.csdn.net/zdyueguanyun/article/details/53741401\ngo 对象 json 转 map")]),a._v(" "),t("p",[a._v("https://golangtc.com/t/5ad068124ce40d265405345e\nGO 二维数组的 json 字符串如何转成 map 或 struct")]),a._v(" "),t("p",[a._v("https://blog.csdn.net/qq_36383623/article/details/103955190\nLua 中的非空判断")]),a._v(" "),t("p",[a._v("https://blog.guaik.org/2021/01/29/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E8%AF%86%E5%88%AB%E5%9E%83%E5%9C%BE%E7%9F%AD%E4%BF%A1/\n朴素贝叶斯算法识别垃圾短信")]),a._v(" "),t("p",[a._v("https://www.cnblogs.com/zhoujie/p/mongo1.html\nmongodb 高级聚合查询")])])}),[],!1,null,null,null);n.default=s.exports}}]);