(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{398:function(a,t,n){"use strict";n.r(t);var e=n(42),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"arts-2019-左耳听风社群活动-每周完成一个-arts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arts-2019-左耳听风社群活动-每周完成一个-arts"}},[a._v("#")]),a._v(" ARTS-2019 左耳听风社群活动--每周完成一个 ARTS")]),a._v(" "),n("p",[a._v("1.Algorithm： 每周至少做一个 leetcode 的算法题\n2.Review: 阅读并点评至少一篇英文技术文章\n3.Tip: 学习至少一个技术技巧\n4.Share: 分享一篇有观点和思考的技术文章")]),a._v(" "),n("h3",{attrs:{id:"_1-algorithm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-algorithm"}},[a._v("#")]),a._v(" 1.Algorithm:")]),a._v(" "),n("p",[a._v("Median of Two Sorted Arrays：https://leetcode.com/submissions/detail/263046752/")]),a._v(" "),n("h3",{attrs:{id:"_2-review"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-review"}},[a._v("#")]),a._v(" 2.Review:")]),a._v(" "),n("p",[a._v("Technical Overview Of Pinpoint：https://github.com/naver/pinpoint/wiki/Technical-Overview-Of-Pinpoint\nPinpoint 是一个分析大型分布式系统的平台，提供解决方案来处理海量跟踪数据。2012年七月开始开发，2015年1月9日作为开源项目启动。")]),a._v(" "),n("h4",{attrs:{id:"点评："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#点评："}},[a._v("#")]),a._v(" 点评：")]),a._v(" "),n("h5",{attrs:{id:"pinpoint-的特点如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pinpoint-的特点如下"}},[a._v("#")]),a._v(" Pinpoint 的特点如下:")]),a._v(" "),n("p",[a._v("分布式事务跟踪，跟踪跨分布式应用的消息\n自动检测应用拓扑，帮助你搞清楚应用的架构\n水平扩展以便支持大规模服务器集群\n提供代码级别的可见性以便轻松定位失败点和瓶颈\n使用字节码增强技术，添加新功能而无需修改代码")]),a._v(" "),n("h5",{attrs:{id:"分布式事务跟踪，基于-google-dapper："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务跟踪，基于-google-dapper："}},[a._v("#")]),a._v(" 分布式事务跟踪，基于 google Dapper：")]),a._v(" "),n("p",[a._v("pinpoint 跟踪单个事务中的分布式请求，基于google Dapper。")]),a._v(" "),n("p",[a._v('在 Google Dapper 中分布式事务追踪是如何工作的\nGoogle\'s Dapper 请见 "Dapper, a Large-Scale Distributed Systems Tracing Infrastructure." [下周Review]（http://research.google.com/pubs/pub36356.html）\nPinpoint 基于 google dapper 的跟踪技术,但是已经修改为在调用的header中添加应用级别标签数据以便在远程调用中跟踪分布式事务。标签数据由多个key组成，定义为 TraceId。')]),a._v(" "),n("h5",{attrs:{id:"pinpoint中的数据结构："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pinpoint中的数据结构："}},[a._v("#")]),a._v(" Pinpoint中的数据结构：")]),a._v(" "),n("p",[a._v("Pinpoint中，核心数据结构由Span, Trace, 和 TraceId组成。")]),a._v(" "),n("p",[a._v("Span: RPC (远程过程调用/remote procedure call)跟踪的基本单元; 当一个 RPC 调用到达时指示工作已经处理完成并包含跟踪数据。为了确保代码级别的可见性，Span 拥有带 SpanEvent 标签的子结构作为数据结构。每个 Span 包含一个 TraceId。\nTrace: 多个 Span 的集合; 由关联的 RPC (Spans) 组成. 在同一个 trace 中的 span 共享相同的 TransactionId。Trace 通过 SpanId 和 ParentSpanId 整理为继承树结构.\nTraceId: 由 TransactionId, SpanId, 和 ParentSpanId 组成的key的集合. TransactionId 指明消息ID，而 SpanId 和 ParentSpanId 表示 RPC 的父-子关系。\nTransactionId (TxId): 在分布式系统间单个事务发送/接收的消息的ID; 必须跨整个服务器集群做到全局唯一.\nSpanId: 当收到 RPC 消息时处理的工作的 ID; 在 RPC 请求到达节点时生成。\nParentSpanId (pSpanId): 发起 RPC 调用的父 span 的 SpanId. 如果节点是事务的起点，这里将没有父 span - 对于这种情况， 使用值-1来表示这个 span 是事务的根 span。")]),a._v(" "),n("h5",{attrs:{id:"traceid如何工作："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#traceid如何工作："}},[a._v("#")]),a._v(" TraceId如何工作：")]),a._v(" "),n("p",[a._v("TransactionId 由 AgentIds, JVM (java虚拟机)启动时间, 和 SequenceNumbers 序列号组成.\nAgentId: 当Jvm启动时用户创建的 ID; 必须在 pinpoinit 安装的全部服务器集群中全局唯一. 最简单的让它保持唯一的方法是使用 hostname($HOSTNAME)，因为 hostname 一般不会重复. 如果需要在服务器集群中运行多个 JVM，请在 hostname 前面增加一个前缀来避免重复。\nJVM 启动时间: 需要用来保证从0开始的 SequenceNumber 的唯一性. 当用户错误的创建了重复的 AgentId 时这个值可以用来预防 ID 冲突。\nSequenceNumber: Pinpoint agent 生成的 ID, 从0开始连续自增;为每个消息生成一个.")]),a._v(" "),n("p",[a._v("字节码增强，无需代码修改\nTwitter 的 Zipkin 使用修改过的类库和它自己的容器 (Finagle)来提供分布式事务跟踪的功能。但是，它要求在需要时修改代码。为了解决这个问题，pinpoint 中使用了字节码增强技术。Pinpoint agent 干预发起 RPC 的代码以此来自动处理标签信息。")]),a._v(" "),n("p",[a._v("克服字节码增强的缺点\n字节码增强在手工方法和自动方法两者之间属于自动方法。\n手工方法： 开发人员使用 ponpoint 提供的 API 在关键点开发记录数据的代码\n自动方法： 开发人员不需要代码改动，因为 pinpoint 决定了哪些 API 要调节和开发")]),a._v(" "),n("h5",{attrs:{id:"字节码增强的价值："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字节码增强的价值："}},[a._v("#")]),a._v(" 字节码增强的价值：")]),a._v(" "),n("p",[a._v("隐藏API\n容易启用或者禁用\n字节码如何工作\npinpoint agent 的性能优化\n使用二进制格式 (thrift)\n使用变长编码和格式优化数据记录\n用常量表替换重复的 API 信息，SQL 语句和字符串\n处理大量请求的采样\n使用异步数据传输来最小化应用线程中止，使用 UDP 传输数据")]),a._v(" "),n("h3",{attrs:{id:"_3-tip"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-tip"}},[a._v("#")]),a._v(" 3.Tip:")]),a._v(" "),n("p",[a._v("更新 spring boot 打包的 jar 中的 BOOT-INF/lib 目录下 jar")]),a._v(" "),n("p",[a._v("1.场景：需要更新 lib 目录下某个 jar 中的配置文件")]),a._v(" "),n("p",[a._v("2.失败的解决方式：用解压软件依次打开 spring boot jar 包（设为 "),n("em",[n("strong",[a._v("a.jar")])]),a._v(" ）、BOOT-INF/lib 目录下的 jar 包（设为 "),n("em",[n("strong",[a._v("b.jar")])]),a._v(" ），然后修改配置文件后保存回 a.jar 包中，这样操作在通过 java -jar 运行 "),n("em",[n("strong",[a._v("a.jar")])]),a._v(" 包时会导致以下错误：")]),a._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[a._v("java.lang.IllegalStateException: Unable to "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("open")]),a._v(" nested entry b.jar. It has been compressed and nested jar files must be stored without compression\n")])])]),n("p",[a._v("3.错误原因：保存修改后 lib 下的 "),n("em",[n("strong",[a._v("b.jar")])]),a._v(" 时压缩软件对 "),n("em",[n("strong",[a._v("b.jar")])]),a._v(" 进行了压缩，导致 "),n("em",[n("strong",[a._v("b.jar")])]),a._v(" 包损坏")]),a._v(" "),n("p",[a._v("4.解决方案：")]),a._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[a._v("在 ***a.jar*** 包所在文件夹新建 BOOT-INF 文件夹，再在 BOOT-INF 下新建 lib 文件夹；\n复制 BOOT-INF/lib 下的 ***b.jar*** 包到以上新建的 lib 文件夹下；\n修改 ***b.jar*** 包配置文件并保存；\n在 a.jar 所在的文件夹运行 jar -uf0 a.jar BOOT-INF/lib/b.jar 命令，即可将修改后 b.jar 无压缩地添加 a.jar 的指定路径中。\n备注：在 jar -uf0 命令中，\nu 指更新现有的归档文件，\nf 指定归档文件名 / 为压缩包指定名字，\n"),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" 仅存储，不压缩，只是打包；不使用任何 ZIP 压缩\n")])])]),n("h3",{attrs:{id:"_4-share"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-share"}},[a._v("#")]),a._v(" 4.Share:")]),a._v(" "),n("p",[a._v("velocity（vm）模板引擎学习语法(https://www.jianshu.com/p/d458d7b8d759)")])])}),[],!1,null,null,null);t.default=r.exports}}]);